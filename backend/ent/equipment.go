// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/B6104641/app/ent/equipment"
	"github.com/facebookincubator/ent/dialect/sql"
)

// Equipment is the model entity for the Equipment schema.
type Equipment struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// EQUIPMENTNAME holds the value of the "EQUIPMENT_NAME" field.
	EQUIPMENTNAME string `json:"EQUIPMENT_NAME,omitempty"`
	// EQUIPMENTPRICE holds the value of the "EQUIPMENT_PRICE" field.
	EQUIPMENTPRICE int `json:"EQUIPMENT_PRICE,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EquipmentQuery when eager-loading is set.
	Edges EquipmentEdges `json:"edges"`
}

// EquipmentEdges holds the relations/edges for other nodes in the graph.
type EquipmentEdges struct {
	// OrderEquipmentt holds the value of the order_equipmentt edge.
	OrderEquipmentt []*Order
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OrderEquipmenttOrErr returns the OrderEquipmentt value or an error if the edge
// was not loaded in eager-loading.
func (e EquipmentEdges) OrderEquipmenttOrErr() ([]*Order, error) {
	if e.loadedTypes[0] {
		return e.OrderEquipmentt, nil
	}
	return nil, &NotLoadedError{edge: "order_equipmentt"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Equipment) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // EQUIPMENT_NAME
		&sql.NullInt64{},  // EQUIPMENT_PRICE
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Equipment fields.
func (e *Equipment) assignValues(values ...interface{}) error {
	if m, n := len(values), len(equipment.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	e.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field EQUIPMENT_NAME", values[0])
	} else if value.Valid {
		e.EQUIPMENTNAME = value.String
	}
	if value, ok := values[1].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field EQUIPMENT_PRICE", values[1])
	} else if value.Valid {
		e.EQUIPMENTPRICE = int(value.Int64)
	}
	return nil
}

// QueryOrderEquipmentt queries the order_equipmentt edge of the Equipment.
func (e *Equipment) QueryOrderEquipmentt() *OrderQuery {
	return (&EquipmentClient{config: e.config}).QueryOrderEquipmentt(e)
}

// Update returns a builder for updating this Equipment.
// Note that, you need to call Equipment.Unwrap() before calling this method, if this Equipment
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Equipment) Update() *EquipmentUpdateOne {
	return (&EquipmentClient{config: e.config}).UpdateOne(e)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (e *Equipment) Unwrap() *Equipment {
	tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: Equipment is not a transactional entity")
	}
	e.config.driver = tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Equipment) String() string {
	var builder strings.Builder
	builder.WriteString("Equipment(")
	builder.WriteString(fmt.Sprintf("id=%v", e.ID))
	builder.WriteString(", EQUIPMENT_NAME=")
	builder.WriteString(e.EQUIPMENTNAME)
	builder.WriteString(", EQUIPMENT_PRICE=")
	builder.WriteString(fmt.Sprintf("%v", e.EQUIPMENTPRICE))
	builder.WriteByte(')')
	return builder.String()
}

// EquipmentSlice is a parsable slice of Equipment.
type EquipmentSlice []*Equipment

func (e EquipmentSlice) config(cfg config) {
	for _i := range e {
		e[_i].config = cfg
	}
}
