// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/B6104641/app/ent/company"
	"github.com/B6104641/app/ent/equipment"
	"github.com/B6104641/app/ent/order"
	"github.com/B6104641/app/ent/user"
	"github.com/facebookincubator/ent/dialect/sql"
)

// Order is the model entity for the Order schema.
type Order struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// AMOUNT holds the value of the "AMOUNT" field.
	AMOUNT int `json:"AMOUNT,omitempty"`
	// PRICE holds the value of the "PRICE" field.
	PRICE int `json:"PRICE,omitempty"`
	// ADDEDTIME holds the value of the "ADDED_TIME" field.
	ADDEDTIME time.Time `json:"ADDED_TIME,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OrderQuery when eager-loading is set.
	Edges                      OrderEdges `json:"edges"`
	company_order_companyy     *int
	equipment_order_equipmentt *int
	user_order_userr           *int
}

// OrderEdges holds the relations/edges for other nodes in the graph.
type OrderEdges struct {
	// Equipment holds the value of the equipment edge.
	Equipment *Equipment
	// Company holds the value of the company edge.
	Company *Company
	// User holds the value of the user edge.
	User *User
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// EquipmentOrErr returns the Equipment value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderEdges) EquipmentOrErr() (*Equipment, error) {
	if e.loadedTypes[0] {
		if e.Equipment == nil {
			// The edge equipment was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: equipment.Label}
		}
		return e.Equipment, nil
	}
	return nil, &NotLoadedError{edge: "equipment"}
}

// CompanyOrErr returns the Company value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderEdges) CompanyOrErr() (*Company, error) {
	if e.loadedTypes[1] {
		if e.Company == nil {
			// The edge company was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: company.Label}
		}
		return e.Company, nil
	}
	return nil, &NotLoadedError{edge: "company"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[2] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Order) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // id
		&sql.NullInt64{}, // AMOUNT
		&sql.NullInt64{}, // PRICE
		&sql.NullTime{},  // ADDED_TIME
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Order) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // company_order_companyy
		&sql.NullInt64{}, // equipment_order_equipmentt
		&sql.NullInt64{}, // user_order_userr
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Order fields.
func (o *Order) assignValues(values ...interface{}) error {
	if m, n := len(values), len(order.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	o.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field AMOUNT", values[0])
	} else if value.Valid {
		o.AMOUNT = int(value.Int64)
	}
	if value, ok := values[1].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field PRICE", values[1])
	} else if value.Valid {
		o.PRICE = int(value.Int64)
	}
	if value, ok := values[2].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field ADDED_TIME", values[2])
	} else if value.Valid {
		o.ADDEDTIME = value.Time
	}
	values = values[3:]
	if len(values) == len(order.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field company_order_companyy", value)
		} else if value.Valid {
			o.company_order_companyy = new(int)
			*o.company_order_companyy = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field equipment_order_equipmentt", value)
		} else if value.Valid {
			o.equipment_order_equipmentt = new(int)
			*o.equipment_order_equipmentt = int(value.Int64)
		}
		if value, ok := values[2].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field user_order_userr", value)
		} else if value.Valid {
			o.user_order_userr = new(int)
			*o.user_order_userr = int(value.Int64)
		}
	}
	return nil
}

// QueryEquipment queries the equipment edge of the Order.
func (o *Order) QueryEquipment() *EquipmentQuery {
	return (&OrderClient{config: o.config}).QueryEquipment(o)
}

// QueryCompany queries the company edge of the Order.
func (o *Order) QueryCompany() *CompanyQuery {
	return (&OrderClient{config: o.config}).QueryCompany(o)
}

// QueryUser queries the user edge of the Order.
func (o *Order) QueryUser() *UserQuery {
	return (&OrderClient{config: o.config}).QueryUser(o)
}

// Update returns a builder for updating this Order.
// Note that, you need to call Order.Unwrap() before calling this method, if this Order
// was returned from a transaction, and the transaction was committed or rolled back.
func (o *Order) Update() *OrderUpdateOne {
	return (&OrderClient{config: o.config}).UpdateOne(o)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (o *Order) Unwrap() *Order {
	tx, ok := o.config.driver.(*txDriver)
	if !ok {
		panic("ent: Order is not a transactional entity")
	}
	o.config.driver = tx.drv
	return o
}

// String implements the fmt.Stringer.
func (o *Order) String() string {
	var builder strings.Builder
	builder.WriteString("Order(")
	builder.WriteString(fmt.Sprintf("id=%v", o.ID))
	builder.WriteString(", AMOUNT=")
	builder.WriteString(fmt.Sprintf("%v", o.AMOUNT))
	builder.WriteString(", PRICE=")
	builder.WriteString(fmt.Sprintf("%v", o.PRICE))
	builder.WriteString(", ADDED_TIME=")
	builder.WriteString(o.ADDEDTIME.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Orders is a parsable slice of Order.
type Orders []*Order

func (o Orders) config(cfg config) {
	for _i := range o {
		o[_i].config = cfg
	}
}
