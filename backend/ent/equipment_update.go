// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/B6104641/app/ent/equipment"
	"github.com/B6104641/app/ent/order"
	"github.com/B6104641/app/ent/predicate"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// EquipmentUpdate is the builder for updating Equipment entities.
type EquipmentUpdate struct {
	config
	hooks      []Hook
	mutation   *EquipmentMutation
	predicates []predicate.Equipment
}

// Where adds a new predicate for the builder.
func (eu *EquipmentUpdate) Where(ps ...predicate.Equipment) *EquipmentUpdate {
	eu.predicates = append(eu.predicates, ps...)
	return eu
}

// SetEQUIPMENTNAME sets the EQUIPMENT_NAME field.
func (eu *EquipmentUpdate) SetEQUIPMENTNAME(s string) *EquipmentUpdate {
	eu.mutation.SetEQUIPMENTNAME(s)
	return eu
}

// SetEQUIPMENTPRICE sets the EQUIPMENT_PRICE field.
func (eu *EquipmentUpdate) SetEQUIPMENTPRICE(i int) *EquipmentUpdate {
	eu.mutation.ResetEQUIPMENTPRICE()
	eu.mutation.SetEQUIPMENTPRICE(i)
	return eu
}

// AddEQUIPMENTPRICE adds i to EQUIPMENT_PRICE.
func (eu *EquipmentUpdate) AddEQUIPMENTPRICE(i int) *EquipmentUpdate {
	eu.mutation.AddEQUIPMENTPRICE(i)
	return eu
}

// AddOrderEquipmenttIDs adds the order_equipmentt edge to Order by ids.
func (eu *EquipmentUpdate) AddOrderEquipmenttIDs(ids ...int) *EquipmentUpdate {
	eu.mutation.AddOrderEquipmenttIDs(ids...)
	return eu
}

// AddOrderEquipmentt adds the order_equipmentt edges to Order.
func (eu *EquipmentUpdate) AddOrderEquipmentt(o ...*Order) *EquipmentUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return eu.AddOrderEquipmenttIDs(ids...)
}

// Mutation returns the EquipmentMutation object of the builder.
func (eu *EquipmentUpdate) Mutation() *EquipmentMutation {
	return eu.mutation
}

// RemoveOrderEquipmenttIDs removes the order_equipmentt edge to Order by ids.
func (eu *EquipmentUpdate) RemoveOrderEquipmenttIDs(ids ...int) *EquipmentUpdate {
	eu.mutation.RemoveOrderEquipmenttIDs(ids...)
	return eu
}

// RemoveOrderEquipmentt removes order_equipmentt edges to Order.
func (eu *EquipmentUpdate) RemoveOrderEquipmentt(o ...*Order) *EquipmentUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return eu.RemoveOrderEquipmenttIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (eu *EquipmentUpdate) Save(ctx context.Context) (int, error) {

	var (
		err      error
		affected int
	)
	if len(eu.hooks) == 0 {
		affected, err = eu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EquipmentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			eu.mutation = mutation
			affected, err = eu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(eu.hooks) - 1; i >= 0; i-- {
			mut = eu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, eu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (eu *EquipmentUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *EquipmentUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *EquipmentUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (eu *EquipmentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   equipment.Table,
			Columns: equipment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: equipment.FieldID,
			},
		},
	}
	if ps := eu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.EQUIPMENTNAME(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: equipment.FieldEQUIPMENTNAME,
		})
	}
	if value, ok := eu.mutation.EQUIPMENTPRICE(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: equipment.FieldEQUIPMENTPRICE,
		})
	}
	if value, ok := eu.mutation.AddedEQUIPMENTPRICE(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: equipment.FieldEQUIPMENTPRICE,
		})
	}
	if nodes := eu.mutation.RemovedOrderEquipmenttIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   equipment.OrderEquipmenttTable,
			Columns: []string{equipment.OrderEquipmenttColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.OrderEquipmenttIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   equipment.OrderEquipmenttTable,
			Columns: []string{equipment.OrderEquipmenttColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{equipment.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// EquipmentUpdateOne is the builder for updating a single Equipment entity.
type EquipmentUpdateOne struct {
	config
	hooks    []Hook
	mutation *EquipmentMutation
}

// SetEQUIPMENTNAME sets the EQUIPMENT_NAME field.
func (euo *EquipmentUpdateOne) SetEQUIPMENTNAME(s string) *EquipmentUpdateOne {
	euo.mutation.SetEQUIPMENTNAME(s)
	return euo
}

// SetEQUIPMENTPRICE sets the EQUIPMENT_PRICE field.
func (euo *EquipmentUpdateOne) SetEQUIPMENTPRICE(i int) *EquipmentUpdateOne {
	euo.mutation.ResetEQUIPMENTPRICE()
	euo.mutation.SetEQUIPMENTPRICE(i)
	return euo
}

// AddEQUIPMENTPRICE adds i to EQUIPMENT_PRICE.
func (euo *EquipmentUpdateOne) AddEQUIPMENTPRICE(i int) *EquipmentUpdateOne {
	euo.mutation.AddEQUIPMENTPRICE(i)
	return euo
}

// AddOrderEquipmenttIDs adds the order_equipmentt edge to Order by ids.
func (euo *EquipmentUpdateOne) AddOrderEquipmenttIDs(ids ...int) *EquipmentUpdateOne {
	euo.mutation.AddOrderEquipmenttIDs(ids...)
	return euo
}

// AddOrderEquipmentt adds the order_equipmentt edges to Order.
func (euo *EquipmentUpdateOne) AddOrderEquipmentt(o ...*Order) *EquipmentUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return euo.AddOrderEquipmenttIDs(ids...)
}

// Mutation returns the EquipmentMutation object of the builder.
func (euo *EquipmentUpdateOne) Mutation() *EquipmentMutation {
	return euo.mutation
}

// RemoveOrderEquipmenttIDs removes the order_equipmentt edge to Order by ids.
func (euo *EquipmentUpdateOne) RemoveOrderEquipmenttIDs(ids ...int) *EquipmentUpdateOne {
	euo.mutation.RemoveOrderEquipmenttIDs(ids...)
	return euo
}

// RemoveOrderEquipmentt removes order_equipmentt edges to Order.
func (euo *EquipmentUpdateOne) RemoveOrderEquipmentt(o ...*Order) *EquipmentUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return euo.RemoveOrderEquipmenttIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (euo *EquipmentUpdateOne) Save(ctx context.Context) (*Equipment, error) {

	var (
		err  error
		node *Equipment
	)
	if len(euo.hooks) == 0 {
		node, err = euo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EquipmentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			euo.mutation = mutation
			node, err = euo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(euo.hooks) - 1; i >= 0; i-- {
			mut = euo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, euo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (euo *EquipmentUpdateOne) SaveX(ctx context.Context) *Equipment {
	e, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return e
}

// Exec executes the query on the entity.
func (euo *EquipmentUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *EquipmentUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (euo *EquipmentUpdateOne) sqlSave(ctx context.Context) (e *Equipment, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   equipment.Table,
			Columns: equipment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: equipment.FieldID,
			},
		},
	}
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Equipment.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := euo.mutation.EQUIPMENTNAME(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: equipment.FieldEQUIPMENTNAME,
		})
	}
	if value, ok := euo.mutation.EQUIPMENTPRICE(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: equipment.FieldEQUIPMENTPRICE,
		})
	}
	if value, ok := euo.mutation.AddedEQUIPMENTPRICE(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: equipment.FieldEQUIPMENTPRICE,
		})
	}
	if nodes := euo.mutation.RemovedOrderEquipmenttIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   equipment.OrderEquipmenttTable,
			Columns: []string{equipment.OrderEquipmenttColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.OrderEquipmenttIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   equipment.OrderEquipmenttTable,
			Columns: []string{equipment.OrderEquipmenttColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	e = &Equipment{config: euo.config}
	_spec.Assign = e.assignValues
	_spec.ScanValues = e.scanValues()
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{equipment.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return e, nil
}
