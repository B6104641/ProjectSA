// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/B6104641/app/ent/company"
	"github.com/B6104641/app/ent/order"
	"github.com/B6104641/app/ent/predicate"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// CompanyUpdate is the builder for updating Company entities.
type CompanyUpdate struct {
	config
	hooks      []Hook
	mutation   *CompanyMutation
	predicates []predicate.Company
}

// Where adds a new predicate for the builder.
func (cu *CompanyUpdate) Where(ps ...predicate.Company) *CompanyUpdate {
	cu.predicates = append(cu.predicates, ps...)
	return cu
}

// SetCOMPANYName sets the COMPANY_Name field.
func (cu *CompanyUpdate) SetCOMPANYName(s string) *CompanyUpdate {
	cu.mutation.SetCOMPANYName(s)
	return cu
}

// AddOrderCompanyyIDs adds the order_companyy edge to Order by ids.
func (cu *CompanyUpdate) AddOrderCompanyyIDs(ids ...int) *CompanyUpdate {
	cu.mutation.AddOrderCompanyyIDs(ids...)
	return cu
}

// AddOrderCompanyy adds the order_companyy edges to Order.
func (cu *CompanyUpdate) AddOrderCompanyy(o ...*Order) *CompanyUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return cu.AddOrderCompanyyIDs(ids...)
}

// Mutation returns the CompanyMutation object of the builder.
func (cu *CompanyUpdate) Mutation() *CompanyMutation {
	return cu.mutation
}

// RemoveOrderCompanyyIDs removes the order_companyy edge to Order by ids.
func (cu *CompanyUpdate) RemoveOrderCompanyyIDs(ids ...int) *CompanyUpdate {
	cu.mutation.RemoveOrderCompanyyIDs(ids...)
	return cu
}

// RemoveOrderCompanyy removes order_companyy edges to Order.
func (cu *CompanyUpdate) RemoveOrderCompanyy(o ...*Order) *CompanyUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return cu.RemoveOrderCompanyyIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (cu *CompanyUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := cu.mutation.COMPANYName(); ok {
		if err := company.COMPANYNameValidator(v); err != nil {
			return 0, &ValidationError{Name: "COMPANY_Name", err: fmt.Errorf("ent: validator failed for field \"COMPANY_Name\": %w", err)}
		}
	}

	var (
		err      error
		affected int
	)
	if len(cu.hooks) == 0 {
		affected, err = cu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CompanyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cu.mutation = mutation
			affected, err = cu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cu.hooks) - 1; i >= 0; i-- {
			mut = cu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CompanyUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CompanyUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CompanyUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cu *CompanyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   company.Table,
			Columns: company.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: company.FieldID,
			},
		},
	}
	if ps := cu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.COMPANYName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: company.FieldCOMPANYName,
		})
	}
	if nodes := cu.mutation.RemovedOrderCompanyyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.OrderCompanyyTable,
			Columns: []string{company.OrderCompanyyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.OrderCompanyyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.OrderCompanyyTable,
			Columns: []string{company.OrderCompanyyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{company.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// CompanyUpdateOne is the builder for updating a single Company entity.
type CompanyUpdateOne struct {
	config
	hooks    []Hook
	mutation *CompanyMutation
}

// SetCOMPANYName sets the COMPANY_Name field.
func (cuo *CompanyUpdateOne) SetCOMPANYName(s string) *CompanyUpdateOne {
	cuo.mutation.SetCOMPANYName(s)
	return cuo
}

// AddOrderCompanyyIDs adds the order_companyy edge to Order by ids.
func (cuo *CompanyUpdateOne) AddOrderCompanyyIDs(ids ...int) *CompanyUpdateOne {
	cuo.mutation.AddOrderCompanyyIDs(ids...)
	return cuo
}

// AddOrderCompanyy adds the order_companyy edges to Order.
func (cuo *CompanyUpdateOne) AddOrderCompanyy(o ...*Order) *CompanyUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return cuo.AddOrderCompanyyIDs(ids...)
}

// Mutation returns the CompanyMutation object of the builder.
func (cuo *CompanyUpdateOne) Mutation() *CompanyMutation {
	return cuo.mutation
}

// RemoveOrderCompanyyIDs removes the order_companyy edge to Order by ids.
func (cuo *CompanyUpdateOne) RemoveOrderCompanyyIDs(ids ...int) *CompanyUpdateOne {
	cuo.mutation.RemoveOrderCompanyyIDs(ids...)
	return cuo
}

// RemoveOrderCompanyy removes order_companyy edges to Order.
func (cuo *CompanyUpdateOne) RemoveOrderCompanyy(o ...*Order) *CompanyUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return cuo.RemoveOrderCompanyyIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (cuo *CompanyUpdateOne) Save(ctx context.Context) (*Company, error) {
	if v, ok := cuo.mutation.COMPANYName(); ok {
		if err := company.COMPANYNameValidator(v); err != nil {
			return nil, &ValidationError{Name: "COMPANY_Name", err: fmt.Errorf("ent: validator failed for field \"COMPANY_Name\": %w", err)}
		}
	}

	var (
		err  error
		node *Company
	)
	if len(cuo.hooks) == 0 {
		node, err = cuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CompanyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cuo.mutation = mutation
			node, err = cuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cuo.hooks) - 1; i >= 0; i-- {
			mut = cuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CompanyUpdateOne) SaveX(ctx context.Context) *Company {
	c, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return c
}

// Exec executes the query on the entity.
func (cuo *CompanyUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CompanyUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cuo *CompanyUpdateOne) sqlSave(ctx context.Context) (c *Company, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   company.Table,
			Columns: company.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: company.FieldID,
			},
		},
	}
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Company.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := cuo.mutation.COMPANYName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: company.FieldCOMPANYName,
		})
	}
	if nodes := cuo.mutation.RemovedOrderCompanyyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.OrderCompanyyTable,
			Columns: []string{company.OrderCompanyyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.OrderCompanyyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.OrderCompanyyTable,
			Columns: []string{company.OrderCompanyyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	c = &Company{config: cuo.config}
	_spec.Assign = c.assignValues
	_spec.ScanValues = c.scanValues()
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{company.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return c, nil
}
