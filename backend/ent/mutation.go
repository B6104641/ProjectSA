// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"
	"time"

	"github.com/B6104641/app/ent/company"
	"github.com/B6104641/app/ent/equipment"
	"github.com/B6104641/app/ent/order"
	"github.com/B6104641/app/ent/user"

	"github.com/facebookincubator/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeCompany   = "Company"
	TypeEquipment = "Equipment"
	TypeOrder     = "Order"
	TypeUser      = "User"
)

// CompanyMutation represents an operation that mutate the Companies
// nodes in the graph.
type CompanyMutation struct {
	config
	op                    Op
	typ                   string
	id                    *int
	_COMPANY_Name         *string
	clearedFields         map[string]struct{}
	order_companyy        map[int]struct{}
	removedorder_companyy map[int]struct{}
	done                  bool
	oldValue              func(context.Context) (*Company, error)
}

var _ ent.Mutation = (*CompanyMutation)(nil)

// companyOption allows to manage the mutation configuration using functional options.
type companyOption func(*CompanyMutation)

// newCompanyMutation creates new mutation for $n.Name.
func newCompanyMutation(c config, op Op, opts ...companyOption) *CompanyMutation {
	m := &CompanyMutation{
		config:        c,
		op:            op,
		typ:           TypeCompany,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCompanyID sets the id field of the mutation.
func withCompanyID(id int) companyOption {
	return func(m *CompanyMutation) {
		var (
			err   error
			once  sync.Once
			value *Company
		)
		m.oldValue = func(ctx context.Context) (*Company, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Company.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCompany sets the old Company of the mutation.
func withCompany(node *Company) companyOption {
	return func(m *CompanyMutation) {
		m.oldValue = func(context.Context) (*Company, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CompanyMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CompanyMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *CompanyMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCOMPANYName sets the COMPANY_Name field.
func (m *CompanyMutation) SetCOMPANYName(s string) {
	m._COMPANY_Name = &s
}

// COMPANYName returns the COMPANY_Name value in the mutation.
func (m *CompanyMutation) COMPANYName() (r string, exists bool) {
	v := m._COMPANY_Name
	if v == nil {
		return
	}
	return *v, true
}

// OldCOMPANYName returns the old COMPANY_Name value of the Company.
// If the Company object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *CompanyMutation) OldCOMPANYName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCOMPANYName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCOMPANYName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCOMPANYName: %w", err)
	}
	return oldValue.COMPANYName, nil
}

// ResetCOMPANYName reset all changes of the "COMPANY_Name" field.
func (m *CompanyMutation) ResetCOMPANYName() {
	m._COMPANY_Name = nil
}

// AddOrderCompanyyIDs adds the order_companyy edge to Order by ids.
func (m *CompanyMutation) AddOrderCompanyyIDs(ids ...int) {
	if m.order_companyy == nil {
		m.order_companyy = make(map[int]struct{})
	}
	for i := range ids {
		m.order_companyy[ids[i]] = struct{}{}
	}
}

// RemoveOrderCompanyyIDs removes the order_companyy edge to Order by ids.
func (m *CompanyMutation) RemoveOrderCompanyyIDs(ids ...int) {
	if m.removedorder_companyy == nil {
		m.removedorder_companyy = make(map[int]struct{})
	}
	for i := range ids {
		m.removedorder_companyy[ids[i]] = struct{}{}
	}
}

// RemovedOrderCompanyy returns the removed ids of order_companyy.
func (m *CompanyMutation) RemovedOrderCompanyyIDs() (ids []int) {
	for id := range m.removedorder_companyy {
		ids = append(ids, id)
	}
	return
}

// OrderCompanyyIDs returns the order_companyy ids in the mutation.
func (m *CompanyMutation) OrderCompanyyIDs() (ids []int) {
	for id := range m.order_companyy {
		ids = append(ids, id)
	}
	return
}

// ResetOrderCompanyy reset all changes of the "order_companyy" edge.
func (m *CompanyMutation) ResetOrderCompanyy() {
	m.order_companyy = nil
	m.removedorder_companyy = nil
}

// Op returns the operation name.
func (m *CompanyMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Company).
func (m *CompanyMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *CompanyMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._COMPANY_Name != nil {
		fields = append(fields, company.FieldCOMPANYName)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *CompanyMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case company.FieldCOMPANYName:
		return m.COMPANYName()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *CompanyMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case company.FieldCOMPANYName:
		return m.OldCOMPANYName(ctx)
	}
	return nil, fmt.Errorf("unknown Company field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *CompanyMutation) SetField(name string, value ent.Value) error {
	switch name {
	case company.FieldCOMPANYName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCOMPANYName(v)
		return nil
	}
	return fmt.Errorf("unknown Company field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *CompanyMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *CompanyMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *CompanyMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Company numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *CompanyMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *CompanyMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *CompanyMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Company nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *CompanyMutation) ResetField(name string) error {
	switch name {
	case company.FieldCOMPANYName:
		m.ResetCOMPANYName()
		return nil
	}
	return fmt.Errorf("unknown Company field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *CompanyMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.order_companyy != nil {
		edges = append(edges, company.EdgeOrderCompanyy)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *CompanyMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case company.EdgeOrderCompanyy:
		ids := make([]ent.Value, 0, len(m.order_companyy))
		for id := range m.order_companyy {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *CompanyMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedorder_companyy != nil {
		edges = append(edges, company.EdgeOrderCompanyy)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *CompanyMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case company.EdgeOrderCompanyy:
		ids := make([]ent.Value, 0, len(m.removedorder_companyy))
		for id := range m.removedorder_companyy {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *CompanyMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *CompanyMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *CompanyMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Company unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *CompanyMutation) ResetEdge(name string) error {
	switch name {
	case company.EdgeOrderCompanyy:
		m.ResetOrderCompanyy()
		return nil
	}
	return fmt.Errorf("unknown Company edge %s", name)
}

// EquipmentMutation represents an operation that mutate the EquipmentSlice
// nodes in the graph.
type EquipmentMutation struct {
	config
	op                      Op
	typ                     string
	id                      *int
	_EQUIPMENT_NAME         *string
	_EQUIPMENT_PRICE        *int
	add_EQUIPMENT_PRICE     *int
	clearedFields           map[string]struct{}
	order_equipmentt        map[int]struct{}
	removedorder_equipmentt map[int]struct{}
	done                    bool
	oldValue                func(context.Context) (*Equipment, error)
}

var _ ent.Mutation = (*EquipmentMutation)(nil)

// equipmentOption allows to manage the mutation configuration using functional options.
type equipmentOption func(*EquipmentMutation)

// newEquipmentMutation creates new mutation for $n.Name.
func newEquipmentMutation(c config, op Op, opts ...equipmentOption) *EquipmentMutation {
	m := &EquipmentMutation{
		config:        c,
		op:            op,
		typ:           TypeEquipment,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withEquipmentID sets the id field of the mutation.
func withEquipmentID(id int) equipmentOption {
	return func(m *EquipmentMutation) {
		var (
			err   error
			once  sync.Once
			value *Equipment
		)
		m.oldValue = func(ctx context.Context) (*Equipment, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Equipment.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withEquipment sets the old Equipment of the mutation.
func withEquipment(node *Equipment) equipmentOption {
	return func(m *EquipmentMutation) {
		m.oldValue = func(context.Context) (*Equipment, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m EquipmentMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m EquipmentMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *EquipmentMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetEQUIPMENTNAME sets the EQUIPMENT_NAME field.
func (m *EquipmentMutation) SetEQUIPMENTNAME(s string) {
	m._EQUIPMENT_NAME = &s
}

// EQUIPMENTNAME returns the EQUIPMENT_NAME value in the mutation.
func (m *EquipmentMutation) EQUIPMENTNAME() (r string, exists bool) {
	v := m._EQUIPMENT_NAME
	if v == nil {
		return
	}
	return *v, true
}

// OldEQUIPMENTNAME returns the old EQUIPMENT_NAME value of the Equipment.
// If the Equipment object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *EquipmentMutation) OldEQUIPMENTNAME(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldEQUIPMENTNAME is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldEQUIPMENTNAME requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEQUIPMENTNAME: %w", err)
	}
	return oldValue.EQUIPMENTNAME, nil
}

// ResetEQUIPMENTNAME reset all changes of the "EQUIPMENT_NAME" field.
func (m *EquipmentMutation) ResetEQUIPMENTNAME() {
	m._EQUIPMENT_NAME = nil
}

// SetEQUIPMENTPRICE sets the EQUIPMENT_PRICE field.
func (m *EquipmentMutation) SetEQUIPMENTPRICE(i int) {
	m._EQUIPMENT_PRICE = &i
	m.add_EQUIPMENT_PRICE = nil
}

// EQUIPMENTPRICE returns the EQUIPMENT_PRICE value in the mutation.
func (m *EquipmentMutation) EQUIPMENTPRICE() (r int, exists bool) {
	v := m._EQUIPMENT_PRICE
	if v == nil {
		return
	}
	return *v, true
}

// OldEQUIPMENTPRICE returns the old EQUIPMENT_PRICE value of the Equipment.
// If the Equipment object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *EquipmentMutation) OldEQUIPMENTPRICE(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldEQUIPMENTPRICE is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldEQUIPMENTPRICE requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEQUIPMENTPRICE: %w", err)
	}
	return oldValue.EQUIPMENTPRICE, nil
}

// AddEQUIPMENTPRICE adds i to EQUIPMENT_PRICE.
func (m *EquipmentMutation) AddEQUIPMENTPRICE(i int) {
	if m.add_EQUIPMENT_PRICE != nil {
		*m.add_EQUIPMENT_PRICE += i
	} else {
		m.add_EQUIPMENT_PRICE = &i
	}
}

// AddedEQUIPMENTPRICE returns the value that was added to the EQUIPMENT_PRICE field in this mutation.
func (m *EquipmentMutation) AddedEQUIPMENTPRICE() (r int, exists bool) {
	v := m.add_EQUIPMENT_PRICE
	if v == nil {
		return
	}
	return *v, true
}

// ResetEQUIPMENTPRICE reset all changes of the "EQUIPMENT_PRICE" field.
func (m *EquipmentMutation) ResetEQUIPMENTPRICE() {
	m._EQUIPMENT_PRICE = nil
	m.add_EQUIPMENT_PRICE = nil
}

// AddOrderEquipmenttIDs adds the order_equipmentt edge to Order by ids.
func (m *EquipmentMutation) AddOrderEquipmenttIDs(ids ...int) {
	if m.order_equipmentt == nil {
		m.order_equipmentt = make(map[int]struct{})
	}
	for i := range ids {
		m.order_equipmentt[ids[i]] = struct{}{}
	}
}

// RemoveOrderEquipmenttIDs removes the order_equipmentt edge to Order by ids.
func (m *EquipmentMutation) RemoveOrderEquipmenttIDs(ids ...int) {
	if m.removedorder_equipmentt == nil {
		m.removedorder_equipmentt = make(map[int]struct{})
	}
	for i := range ids {
		m.removedorder_equipmentt[ids[i]] = struct{}{}
	}
}

// RemovedOrderEquipmentt returns the removed ids of order_equipmentt.
func (m *EquipmentMutation) RemovedOrderEquipmenttIDs() (ids []int) {
	for id := range m.removedorder_equipmentt {
		ids = append(ids, id)
	}
	return
}

// OrderEquipmenttIDs returns the order_equipmentt ids in the mutation.
func (m *EquipmentMutation) OrderEquipmenttIDs() (ids []int) {
	for id := range m.order_equipmentt {
		ids = append(ids, id)
	}
	return
}

// ResetOrderEquipmentt reset all changes of the "order_equipmentt" edge.
func (m *EquipmentMutation) ResetOrderEquipmentt() {
	m.order_equipmentt = nil
	m.removedorder_equipmentt = nil
}

// Op returns the operation name.
func (m *EquipmentMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Equipment).
func (m *EquipmentMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *EquipmentMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m._EQUIPMENT_NAME != nil {
		fields = append(fields, equipment.FieldEQUIPMENTNAME)
	}
	if m._EQUIPMENT_PRICE != nil {
		fields = append(fields, equipment.FieldEQUIPMENTPRICE)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *EquipmentMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case equipment.FieldEQUIPMENTNAME:
		return m.EQUIPMENTNAME()
	case equipment.FieldEQUIPMENTPRICE:
		return m.EQUIPMENTPRICE()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *EquipmentMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case equipment.FieldEQUIPMENTNAME:
		return m.OldEQUIPMENTNAME(ctx)
	case equipment.FieldEQUIPMENTPRICE:
		return m.OldEQUIPMENTPRICE(ctx)
	}
	return nil, fmt.Errorf("unknown Equipment field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *EquipmentMutation) SetField(name string, value ent.Value) error {
	switch name {
	case equipment.FieldEQUIPMENTNAME:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEQUIPMENTNAME(v)
		return nil
	case equipment.FieldEQUIPMENTPRICE:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEQUIPMENTPRICE(v)
		return nil
	}
	return fmt.Errorf("unknown Equipment field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *EquipmentMutation) AddedFields() []string {
	var fields []string
	if m.add_EQUIPMENT_PRICE != nil {
		fields = append(fields, equipment.FieldEQUIPMENTPRICE)
	}
	return fields
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *EquipmentMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case equipment.FieldEQUIPMENTPRICE:
		return m.AddedEQUIPMENTPRICE()
	}
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *EquipmentMutation) AddField(name string, value ent.Value) error {
	switch name {
	case equipment.FieldEQUIPMENTPRICE:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddEQUIPMENTPRICE(v)
		return nil
	}
	return fmt.Errorf("unknown Equipment numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *EquipmentMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *EquipmentMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *EquipmentMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Equipment nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *EquipmentMutation) ResetField(name string) error {
	switch name {
	case equipment.FieldEQUIPMENTNAME:
		m.ResetEQUIPMENTNAME()
		return nil
	case equipment.FieldEQUIPMENTPRICE:
		m.ResetEQUIPMENTPRICE()
		return nil
	}
	return fmt.Errorf("unknown Equipment field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *EquipmentMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.order_equipmentt != nil {
		edges = append(edges, equipment.EdgeOrderEquipmentt)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *EquipmentMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case equipment.EdgeOrderEquipmentt:
		ids := make([]ent.Value, 0, len(m.order_equipmentt))
		for id := range m.order_equipmentt {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *EquipmentMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedorder_equipmentt != nil {
		edges = append(edges, equipment.EdgeOrderEquipmentt)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *EquipmentMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case equipment.EdgeOrderEquipmentt:
		ids := make([]ent.Value, 0, len(m.removedorder_equipmentt))
		for id := range m.removedorder_equipmentt {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *EquipmentMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *EquipmentMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *EquipmentMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Equipment unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *EquipmentMutation) ResetEdge(name string) error {
	switch name {
	case equipment.EdgeOrderEquipmentt:
		m.ResetOrderEquipmentt()
		return nil
	}
	return fmt.Errorf("unknown Equipment edge %s", name)
}

// OrderMutation represents an operation that mutate the Orders
// nodes in the graph.
type OrderMutation struct {
	config
	op               Op
	typ              string
	id               *int
	_AMOUNT          *int
	add_AMOUNT       *int
	_PRICE           *int
	add_PRICE        *int
	_ADDED_TIME      *time.Time
	clearedFields    map[string]struct{}
	equipment        *int
	clearedequipment bool
	company          *int
	clearedcompany   bool
	user             *int
	cleareduser      bool
	done             bool
	oldValue         func(context.Context) (*Order, error)
}

var _ ent.Mutation = (*OrderMutation)(nil)

// orderOption allows to manage the mutation configuration using functional options.
type orderOption func(*OrderMutation)

// newOrderMutation creates new mutation for $n.Name.
func newOrderMutation(c config, op Op, opts ...orderOption) *OrderMutation {
	m := &OrderMutation{
		config:        c,
		op:            op,
		typ:           TypeOrder,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withOrderID sets the id field of the mutation.
func withOrderID(id int) orderOption {
	return func(m *OrderMutation) {
		var (
			err   error
			once  sync.Once
			value *Order
		)
		m.oldValue = func(ctx context.Context) (*Order, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Order.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withOrder sets the old Order of the mutation.
func withOrder(node *Order) orderOption {
	return func(m *OrderMutation) {
		m.oldValue = func(context.Context) (*Order, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m OrderMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m OrderMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *OrderMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetAMOUNT sets the AMOUNT field.
func (m *OrderMutation) SetAMOUNT(i int) {
	m._AMOUNT = &i
	m.add_AMOUNT = nil
}

// AMOUNT returns the AMOUNT value in the mutation.
func (m *OrderMutation) AMOUNT() (r int, exists bool) {
	v := m._AMOUNT
	if v == nil {
		return
	}
	return *v, true
}

// OldAMOUNT returns the old AMOUNT value of the Order.
// If the Order object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *OrderMutation) OldAMOUNT(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAMOUNT is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAMOUNT requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAMOUNT: %w", err)
	}
	return oldValue.AMOUNT, nil
}

// AddAMOUNT adds i to AMOUNT.
func (m *OrderMutation) AddAMOUNT(i int) {
	if m.add_AMOUNT != nil {
		*m.add_AMOUNT += i
	} else {
		m.add_AMOUNT = &i
	}
}

// AddedAMOUNT returns the value that was added to the AMOUNT field in this mutation.
func (m *OrderMutation) AddedAMOUNT() (r int, exists bool) {
	v := m.add_AMOUNT
	if v == nil {
		return
	}
	return *v, true
}

// ResetAMOUNT reset all changes of the "AMOUNT" field.
func (m *OrderMutation) ResetAMOUNT() {
	m._AMOUNT = nil
	m.add_AMOUNT = nil
}

// SetPRICE sets the PRICE field.
func (m *OrderMutation) SetPRICE(i int) {
	m._PRICE = &i
	m.add_PRICE = nil
}

// PRICE returns the PRICE value in the mutation.
func (m *OrderMutation) PRICE() (r int, exists bool) {
	v := m._PRICE
	if v == nil {
		return
	}
	return *v, true
}

// OldPRICE returns the old PRICE value of the Order.
// If the Order object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *OrderMutation) OldPRICE(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPRICE is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPRICE requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPRICE: %w", err)
	}
	return oldValue.PRICE, nil
}

// AddPRICE adds i to PRICE.
func (m *OrderMutation) AddPRICE(i int) {
	if m.add_PRICE != nil {
		*m.add_PRICE += i
	} else {
		m.add_PRICE = &i
	}
}

// AddedPRICE returns the value that was added to the PRICE field in this mutation.
func (m *OrderMutation) AddedPRICE() (r int, exists bool) {
	v := m.add_PRICE
	if v == nil {
		return
	}
	return *v, true
}

// ResetPRICE reset all changes of the "PRICE" field.
func (m *OrderMutation) ResetPRICE() {
	m._PRICE = nil
	m.add_PRICE = nil
}

// SetADDEDTIME sets the ADDED_TIME field.
func (m *OrderMutation) SetADDEDTIME(t time.Time) {
	m._ADDED_TIME = &t
}

// ADDEDTIME returns the ADDED_TIME value in the mutation.
func (m *OrderMutation) ADDEDTIME() (r time.Time, exists bool) {
	v := m._ADDED_TIME
	if v == nil {
		return
	}
	return *v, true
}

// OldADDEDTIME returns the old ADDED_TIME value of the Order.
// If the Order object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *OrderMutation) OldADDEDTIME(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldADDEDTIME is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldADDEDTIME requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldADDEDTIME: %w", err)
	}
	return oldValue.ADDEDTIME, nil
}

// ResetADDEDTIME reset all changes of the "ADDED_TIME" field.
func (m *OrderMutation) ResetADDEDTIME() {
	m._ADDED_TIME = nil
}

// SetEquipmentID sets the equipment edge to Equipment by id.
func (m *OrderMutation) SetEquipmentID(id int) {
	m.equipment = &id
}

// ClearEquipment clears the equipment edge to Equipment.
func (m *OrderMutation) ClearEquipment() {
	m.clearedequipment = true
}

// EquipmentCleared returns if the edge equipment was cleared.
func (m *OrderMutation) EquipmentCleared() bool {
	return m.clearedequipment
}

// EquipmentID returns the equipment id in the mutation.
func (m *OrderMutation) EquipmentID() (id int, exists bool) {
	if m.equipment != nil {
		return *m.equipment, true
	}
	return
}

// EquipmentIDs returns the equipment ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// EquipmentID instead. It exists only for internal usage by the builders.
func (m *OrderMutation) EquipmentIDs() (ids []int) {
	if id := m.equipment; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetEquipment reset all changes of the "equipment" edge.
func (m *OrderMutation) ResetEquipment() {
	m.equipment = nil
	m.clearedequipment = false
}

// SetCompanyID sets the company edge to Company by id.
func (m *OrderMutation) SetCompanyID(id int) {
	m.company = &id
}

// ClearCompany clears the company edge to Company.
func (m *OrderMutation) ClearCompany() {
	m.clearedcompany = true
}

// CompanyCleared returns if the edge company was cleared.
func (m *OrderMutation) CompanyCleared() bool {
	return m.clearedcompany
}

// CompanyID returns the company id in the mutation.
func (m *OrderMutation) CompanyID() (id int, exists bool) {
	if m.company != nil {
		return *m.company, true
	}
	return
}

// CompanyIDs returns the company ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// CompanyID instead. It exists only for internal usage by the builders.
func (m *OrderMutation) CompanyIDs() (ids []int) {
	if id := m.company; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCompany reset all changes of the "company" edge.
func (m *OrderMutation) ResetCompany() {
	m.company = nil
	m.clearedcompany = false
}

// SetUserID sets the user edge to User by id.
func (m *OrderMutation) SetUserID(id int) {
	m.user = &id
}

// ClearUser clears the user edge to User.
func (m *OrderMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared returns if the edge user was cleared.
func (m *OrderMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the user id in the mutation.
func (m *OrderMutation) UserID() (id int, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the user ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *OrderMutation) UserIDs() (ids []int) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser reset all changes of the "user" edge.
func (m *OrderMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Op returns the operation name.
func (m *OrderMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Order).
func (m *OrderMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *OrderMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m._AMOUNT != nil {
		fields = append(fields, order.FieldAMOUNT)
	}
	if m._PRICE != nil {
		fields = append(fields, order.FieldPRICE)
	}
	if m._ADDED_TIME != nil {
		fields = append(fields, order.FieldADDEDTIME)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *OrderMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case order.FieldAMOUNT:
		return m.AMOUNT()
	case order.FieldPRICE:
		return m.PRICE()
	case order.FieldADDEDTIME:
		return m.ADDEDTIME()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *OrderMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case order.FieldAMOUNT:
		return m.OldAMOUNT(ctx)
	case order.FieldPRICE:
		return m.OldPRICE(ctx)
	case order.FieldADDEDTIME:
		return m.OldADDEDTIME(ctx)
	}
	return nil, fmt.Errorf("unknown Order field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *OrderMutation) SetField(name string, value ent.Value) error {
	switch name {
	case order.FieldAMOUNT:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAMOUNT(v)
		return nil
	case order.FieldPRICE:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPRICE(v)
		return nil
	case order.FieldADDEDTIME:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetADDEDTIME(v)
		return nil
	}
	return fmt.Errorf("unknown Order field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *OrderMutation) AddedFields() []string {
	var fields []string
	if m.add_AMOUNT != nil {
		fields = append(fields, order.FieldAMOUNT)
	}
	if m.add_PRICE != nil {
		fields = append(fields, order.FieldPRICE)
	}
	return fields
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *OrderMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case order.FieldAMOUNT:
		return m.AddedAMOUNT()
	case order.FieldPRICE:
		return m.AddedPRICE()
	}
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *OrderMutation) AddField(name string, value ent.Value) error {
	switch name {
	case order.FieldAMOUNT:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAMOUNT(v)
		return nil
	case order.FieldPRICE:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPRICE(v)
		return nil
	}
	return fmt.Errorf("unknown Order numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *OrderMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *OrderMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *OrderMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Order nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *OrderMutation) ResetField(name string) error {
	switch name {
	case order.FieldAMOUNT:
		m.ResetAMOUNT()
		return nil
	case order.FieldPRICE:
		m.ResetPRICE()
		return nil
	case order.FieldADDEDTIME:
		m.ResetADDEDTIME()
		return nil
	}
	return fmt.Errorf("unknown Order field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *OrderMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.equipment != nil {
		edges = append(edges, order.EdgeEquipment)
	}
	if m.company != nil {
		edges = append(edges, order.EdgeCompany)
	}
	if m.user != nil {
		edges = append(edges, order.EdgeUser)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *OrderMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case order.EdgeEquipment:
		if id := m.equipment; id != nil {
			return []ent.Value{*id}
		}
	case order.EdgeCompany:
		if id := m.company; id != nil {
			return []ent.Value{*id}
		}
	case order.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *OrderMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *OrderMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *OrderMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedequipment {
		edges = append(edges, order.EdgeEquipment)
	}
	if m.clearedcompany {
		edges = append(edges, order.EdgeCompany)
	}
	if m.cleareduser {
		edges = append(edges, order.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *OrderMutation) EdgeCleared(name string) bool {
	switch name {
	case order.EdgeEquipment:
		return m.clearedequipment
	case order.EdgeCompany:
		return m.clearedcompany
	case order.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *OrderMutation) ClearEdge(name string) error {
	switch name {
	case order.EdgeEquipment:
		m.ClearEquipment()
		return nil
	case order.EdgeCompany:
		m.ClearCompany()
		return nil
	case order.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown Order unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *OrderMutation) ResetEdge(name string) error {
	switch name {
	case order.EdgeEquipment:
		m.ResetEquipment()
		return nil
	case order.EdgeCompany:
		m.ResetCompany()
		return nil
	case order.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown Order edge %s", name)
}

// UserMutation represents an operation that mutate the Users
// nodes in the graph.
type UserMutation struct {
	config
	op                 Op
	typ                string
	id                 *int
	_USER_EMAIL        *string
	_USER_PASSWORD     *string
	_USER_NAME         *string
	clearedFields      map[string]struct{}
	order_userr        map[int]struct{}
	removedorder_userr map[int]struct{}
	done               bool
	oldValue           func(context.Context) (*User, error)
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows to manage the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for $n.Name.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the id field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetUSEREMAIL sets the USER_EMAIL field.
func (m *UserMutation) SetUSEREMAIL(s string) {
	m._USER_EMAIL = &s
}

// USEREMAIL returns the USER_EMAIL value in the mutation.
func (m *UserMutation) USEREMAIL() (r string, exists bool) {
	v := m._USER_EMAIL
	if v == nil {
		return
	}
	return *v, true
}

// OldUSEREMAIL returns the old USER_EMAIL value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldUSEREMAIL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUSEREMAIL is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUSEREMAIL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUSEREMAIL: %w", err)
	}
	return oldValue.USEREMAIL, nil
}

// ResetUSEREMAIL reset all changes of the "USER_EMAIL" field.
func (m *UserMutation) ResetUSEREMAIL() {
	m._USER_EMAIL = nil
}

// SetUSERPASSWORD sets the USER_PASSWORD field.
func (m *UserMutation) SetUSERPASSWORD(s string) {
	m._USER_PASSWORD = &s
}

// USERPASSWORD returns the USER_PASSWORD value in the mutation.
func (m *UserMutation) USERPASSWORD() (r string, exists bool) {
	v := m._USER_PASSWORD
	if v == nil {
		return
	}
	return *v, true
}

// OldUSERPASSWORD returns the old USER_PASSWORD value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldUSERPASSWORD(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUSERPASSWORD is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUSERPASSWORD requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUSERPASSWORD: %w", err)
	}
	return oldValue.USERPASSWORD, nil
}

// ResetUSERPASSWORD reset all changes of the "USER_PASSWORD" field.
func (m *UserMutation) ResetUSERPASSWORD() {
	m._USER_PASSWORD = nil
}

// SetUSERNAME sets the USER_NAME field.
func (m *UserMutation) SetUSERNAME(s string) {
	m._USER_NAME = &s
}

// USERNAME returns the USER_NAME value in the mutation.
func (m *UserMutation) USERNAME() (r string, exists bool) {
	v := m._USER_NAME
	if v == nil {
		return
	}
	return *v, true
}

// OldUSERNAME returns the old USER_NAME value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldUSERNAME(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUSERNAME is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUSERNAME requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUSERNAME: %w", err)
	}
	return oldValue.USERNAME, nil
}

// ResetUSERNAME reset all changes of the "USER_NAME" field.
func (m *UserMutation) ResetUSERNAME() {
	m._USER_NAME = nil
}

// AddOrderUserrIDs adds the order_userr edge to Order by ids.
func (m *UserMutation) AddOrderUserrIDs(ids ...int) {
	if m.order_userr == nil {
		m.order_userr = make(map[int]struct{})
	}
	for i := range ids {
		m.order_userr[ids[i]] = struct{}{}
	}
}

// RemoveOrderUserrIDs removes the order_userr edge to Order by ids.
func (m *UserMutation) RemoveOrderUserrIDs(ids ...int) {
	if m.removedorder_userr == nil {
		m.removedorder_userr = make(map[int]struct{})
	}
	for i := range ids {
		m.removedorder_userr[ids[i]] = struct{}{}
	}
}

// RemovedOrderUserr returns the removed ids of order_userr.
func (m *UserMutation) RemovedOrderUserrIDs() (ids []int) {
	for id := range m.removedorder_userr {
		ids = append(ids, id)
	}
	return
}

// OrderUserrIDs returns the order_userr ids in the mutation.
func (m *UserMutation) OrderUserrIDs() (ids []int) {
	for id := range m.order_userr {
		ids = append(ids, id)
	}
	return
}

// ResetOrderUserr reset all changes of the "order_userr" edge.
func (m *UserMutation) ResetOrderUserr() {
	m.order_userr = nil
	m.removedorder_userr = nil
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m._USER_EMAIL != nil {
		fields = append(fields, user.FieldUSEREMAIL)
	}
	if m._USER_PASSWORD != nil {
		fields = append(fields, user.FieldUSERPASSWORD)
	}
	if m._USER_NAME != nil {
		fields = append(fields, user.FieldUSERNAME)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldUSEREMAIL:
		return m.USEREMAIL()
	case user.FieldUSERPASSWORD:
		return m.USERPASSWORD()
	case user.FieldUSERNAME:
		return m.USERNAME()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldUSEREMAIL:
		return m.OldUSEREMAIL(ctx)
	case user.FieldUSERPASSWORD:
		return m.OldUSERPASSWORD(ctx)
	case user.FieldUSERNAME:
		return m.OldUSERNAME(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldUSEREMAIL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUSEREMAIL(v)
		return nil
	case user.FieldUSERPASSWORD:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUSERPASSWORD(v)
		return nil
	case user.FieldUSERNAME:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUSERNAME(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldUSEREMAIL:
		m.ResetUSEREMAIL()
		return nil
	case user.FieldUSERPASSWORD:
		m.ResetUSERPASSWORD()
		return nil
	case user.FieldUSERNAME:
		m.ResetUSERNAME()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.order_userr != nil {
		edges = append(edges, user.EdgeOrderUserr)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeOrderUserr:
		ids := make([]ent.Value, 0, len(m.order_userr))
		for id := range m.order_userr {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedorder_userr != nil {
		edges = append(edges, user.EdgeOrderUserr)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeOrderUserr:
		ids := make([]ent.Value, 0, len(m.removedorder_userr))
		for id := range m.removedorder_userr {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeOrderUserr:
		m.ResetOrderUserr()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
