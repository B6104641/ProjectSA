// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/B6104641/app/ent/company"
	"github.com/B6104641/app/ent/equipment"
	"github.com/B6104641/app/ent/order"
	"github.com/B6104641/app/ent/user"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// OrderCreate is the builder for creating a Order entity.
type OrderCreate struct {
	config
	mutation *OrderMutation
	hooks    []Hook
}

// SetAMOUNT sets the AMOUNT field.
func (oc *OrderCreate) SetAMOUNT(i int) *OrderCreate {
	oc.mutation.SetAMOUNT(i)
	return oc
}

// SetPRICE sets the PRICE field.
func (oc *OrderCreate) SetPRICE(i int) *OrderCreate {
	oc.mutation.SetPRICE(i)
	return oc
}

// SetADDEDTIME sets the ADDED_TIME field.
func (oc *OrderCreate) SetADDEDTIME(t time.Time) *OrderCreate {
	oc.mutation.SetADDEDTIME(t)
	return oc
}

// SetEquipmentID sets the equipment edge to Equipment by id.
func (oc *OrderCreate) SetEquipmentID(id int) *OrderCreate {
	oc.mutation.SetEquipmentID(id)
	return oc
}

// SetNillableEquipmentID sets the equipment edge to Equipment by id if the given value is not nil.
func (oc *OrderCreate) SetNillableEquipmentID(id *int) *OrderCreate {
	if id != nil {
		oc = oc.SetEquipmentID(*id)
	}
	return oc
}

// SetEquipment sets the equipment edge to Equipment.
func (oc *OrderCreate) SetEquipment(e *Equipment) *OrderCreate {
	return oc.SetEquipmentID(e.ID)
}

// SetCompanyID sets the company edge to Company by id.
func (oc *OrderCreate) SetCompanyID(id int) *OrderCreate {
	oc.mutation.SetCompanyID(id)
	return oc
}

// SetNillableCompanyID sets the company edge to Company by id if the given value is not nil.
func (oc *OrderCreate) SetNillableCompanyID(id *int) *OrderCreate {
	if id != nil {
		oc = oc.SetCompanyID(*id)
	}
	return oc
}

// SetCompany sets the company edge to Company.
func (oc *OrderCreate) SetCompany(c *Company) *OrderCreate {
	return oc.SetCompanyID(c.ID)
}

// SetUserID sets the user edge to User by id.
func (oc *OrderCreate) SetUserID(id int) *OrderCreate {
	oc.mutation.SetUserID(id)
	return oc
}

// SetNillableUserID sets the user edge to User by id if the given value is not nil.
func (oc *OrderCreate) SetNillableUserID(id *int) *OrderCreate {
	if id != nil {
		oc = oc.SetUserID(*id)
	}
	return oc
}

// SetUser sets the user edge to User.
func (oc *OrderCreate) SetUser(u *User) *OrderCreate {
	return oc.SetUserID(u.ID)
}

// Mutation returns the OrderMutation object of the builder.
func (oc *OrderCreate) Mutation() *OrderMutation {
	return oc.mutation
}

// Save creates the Order in the database.
func (oc *OrderCreate) Save(ctx context.Context) (*Order, error) {
	if _, ok := oc.mutation.AMOUNT(); !ok {
		return nil, &ValidationError{Name: "AMOUNT", err: errors.New("ent: missing required field \"AMOUNT\"")}
	}
	if _, ok := oc.mutation.PRICE(); !ok {
		return nil, &ValidationError{Name: "PRICE", err: errors.New("ent: missing required field \"PRICE\"")}
	}
	if _, ok := oc.mutation.ADDEDTIME(); !ok {
		return nil, &ValidationError{Name: "ADDED_TIME", err: errors.New("ent: missing required field \"ADDED_TIME\"")}
	}
	var (
		err  error
		node *Order
	)
	if len(oc.hooks) == 0 {
		node, err = oc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			oc.mutation = mutation
			node, err = oc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(oc.hooks) - 1; i >= 0; i-- {
			mut = oc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, oc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (oc *OrderCreate) SaveX(ctx context.Context) *Order {
	v, err := oc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (oc *OrderCreate) sqlSave(ctx context.Context) (*Order, error) {
	o, _spec := oc.createSpec()
	if err := sqlgraph.CreateNode(ctx, oc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	o.ID = int(id)
	return o, nil
}

func (oc *OrderCreate) createSpec() (*Order, *sqlgraph.CreateSpec) {
	var (
		o     = &Order{config: oc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: order.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: order.FieldID,
			},
		}
	)
	if value, ok := oc.mutation.AMOUNT(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: order.FieldAMOUNT,
		})
		o.AMOUNT = value
	}
	if value, ok := oc.mutation.PRICE(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: order.FieldPRICE,
		})
		o.PRICE = value
	}
	if value, ok := oc.mutation.ADDEDTIME(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: order.FieldADDEDTIME,
		})
		o.ADDEDTIME = value
	}
	if nodes := oc.mutation.EquipmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.EquipmentTable,
			Columns: []string{order.EquipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: equipment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.CompanyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.CompanyTable,
			Columns: []string{order.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: company.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.UserTable,
			Columns: []string{order.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return o, _spec
}
